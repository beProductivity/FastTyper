"use client"
import './game.scss';
import 'public/assets/keyboard-theme/index.scss';
import Keyboard from "react-simple-keyboard";
import { Component, useState, useRef, useEffect } from 'react';


export default function Game()
{
  
   
    /*disabled buttons */
    const DisabledKeys:string[] = ["F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8","F9","F10","F11","F12", "Shift", "Control", "Alt", "CapsLock", "Tab", "Enter", "Escape", "ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "Backspace", "Delete", "Home", "End", "PageUp", "PageDown"]; 
     /*Text in text area */
    const [WriteText, setWriteText] = useState<string>("");
    /*Text generated by GameContent */
    const [displayedText, setDisplayedText] = useState<string>("demoText");
   
    /*Change keyboard theme */
    const ThemeKeyboardList:string[] = ['hg-theme-default', 'hg-theme-red']
    const [themeKeyboard, setThemeKeyboard] = useState<string>()
 

    useEffect(() => {
        // Funkcja obsługująca zdarzenie klawiatury
        const handleKeyPress = (event: KeyboardEvent) => {
          if (!DisabledKeys.includes(event.key)) {
            setWriteText(prevWriteText => prevWriteText + event.key);
            const targetButton = document.querySelector('[data-skbtn="' + event.key.toString() + '"]');
            targetButton?.classList.add("hg-activeButton");
            setTimeout(() => {
              targetButton?.classList.remove("hg-activeButton");
            }, 100);
            
          }
        };

        // nasłuchiwanie na zdarzenie klawiatury przy montażu komponentu
        window.addEventListener('keydown', handleKeyPress);
    
        // Funkcja zwrotna czyszcząca nasłuchiwanie przy demontażu komponentu
        return () => {
          window.removeEventListener('keydown', handleKeyPress);
        };
      }, []);

      useEffect(() => {
        console.log(WriteText)
      }, [WriteText])

          /* DELETE @/.com button */
      useEffect(() => {
        document.querySelector('[data-skbtn=".com"]')?.remove();
        document.querySelector('[data-skbtn="@"]')?.remove();
      }, [themeKeyboard])
    
    return(
    <div>
        <div className='typearea'> 
        <div className='display_words'>
            <h1>{displayedText}</h1>
        </div>
           <textarea defaultValue={WriteText} readOnly/>
           <div className='keyboard'>
                <Keyboard
                    layoutName={"default"}
                    theme={themeKeyboard}
                   />
                Theme:
                <select
                        value={themeKeyboard}
                        onChange={e => setThemeKeyboard(e.target.value)}>
                        {ThemeKeyboardList.map(o => (
                          <option key={o} value={o}>{o}</option>
                        ))}
              </select>

            </div>
       </div>
    </div>)
}